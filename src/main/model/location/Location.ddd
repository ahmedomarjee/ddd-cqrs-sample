context dddsample {

	namespace location {
		
		import dddsample.common.*
		import dddsample.location.UniqueUnLocodeConstraint
		
		/**
		 * A location in our model is a stop on a journey, such as cargo
		 * origin or destination, or carrier movement endpoints.
 		 */
		aggregate Location {
			
			LocationName name
			
			/** Creates a new location. */
			constructor create fires LocationCreatedEvent {
				
				UnLocode code business-rules UniqueUnLocodeConstraint 
				
				LocationName name
				
				LocationConstructorService srv 
				
				/**
				 * Location constructor service.
				 */
				service LocationConstructorService {
		
					/** 
					 * Verifies if the given UN location code exists.
					 */
					method unLocodeExists {
						
						/** UN location code to verify. */
						UnLocode code
						
						/** TRUE if the given code already exists else FALSE. */
						returns Boolean
						
					}
					
				}
				
				/** A new location was created. */
				event LocationCreatedEvent {
					
					UnLocode code
					
					LocationName name
					
					message "Created location '${name}' [${code}]"
					
				}
				
			}

			/**
			 * United nations location code (http://www.unece.org/cefact/locode/service/location.html).
			 */
			aggregate-id UnLocode base String {
				
				slabel "UNLOCODE"
				label "UN Location Code"
				tooltip "United nations location code"
				examples "USMNH" "DEHAM"
				
				/** Persistent value. */
				String code invariants Pattern("[A-Z]{2}[A-Z2-9]{3}") 
				
			}
			
			/**
			 * Name of a location.
			 */
			value-object LocationName base String {
	
				slabel "Name"
				label "Location name"
				tooltip "Unique name of the location"
				examples "Manhattan/New York" "Hamburg"
				
				/** Persistent value. */
				String name invariants Length(1, 100)
				
			}
			
		}
	
	}
	
}
